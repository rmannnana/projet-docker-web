# docker-compose.yml
 version: '3.8'
 services:
  # Reverse Proxy Nginx
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - api-gateway
    networks:
      - frontend_network
      - backend_network
  # Frontend React
  frontend:
    build: 
      context: ./frontend
      target: production
    networks:
      - frontend_network
    restart: unless-stopped
  # API Gateway
  api-gateway:
    build: ./api-gateway
    environment:
      - USER_SERVICE_URL=http://user-service:3000
      - PRODUCT_SERVICE_URL=http://product-service:5000
      - ORDER_SERVICE_URL=http://order-service:3001
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - frontend_network
      - backend_network
    restart: unless-stopped
  # Service Utilisateurs
  user-service:
    build: ./user-service
    environment:
      - MONGODB_URL=mongodb://mongo:27017/users
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongo
    networks:
      - backend_network
    restart: unless-stopped
  # Service Produits
  product-service:
    build: ./product-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/products
    depends_on:
      - postgres
    networks:
      - backend_network
    restart: unless-stopped

 # Service Commandes
  order-service:
    build: ./order-service
    environment:
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3000
      - PRODUCT_SERVICE_URL=http://product-service:5000
    depends_on:
      - redis
    networks:
      - backend_network
    restart: unless-stopped
  # Base de données PostgreSQL
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=products
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./product-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend_network
    restart: unless-stopped
  # Base de données MongoDB
  mongo:
    image: mongo:4.4
    volumes:
      - mongo_data:/data/db
    networks:
    - backend_network
    restart: unless-stopped
  # Cache Redis
  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    networks:
      - backend_network
    restart: unless-stopped
 volumes:
  postgres_data:
  mongo_data:
  redis_data:
 networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge